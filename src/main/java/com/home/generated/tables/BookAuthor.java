/**
 * This class is generated by jOOQ
 */
package com.home.generated.tables;


import com.home.generated.JooqDemo;
import com.home.generated.Keys;
import com.home.generated.tables.records.BookAuthorRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookAuthor extends TableImpl<BookAuthorRecord> {

	private static final long serialVersionUID = -793064853;

	/**
	 * The reference instance of <code>jooq_demo.book_author</code>
	 */
	public static final BookAuthor BOOK_AUTHOR = new BookAuthor();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<BookAuthorRecord> getRecordType() {
		return BookAuthorRecord.class;
	}

	/**
	 * The column <code>jooq_demo.book_author.book_id</code>.
	 */
	public final TableField<BookAuthorRecord, Long> BOOK_ID = createField("book_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>jooq_demo.book_author.author_id</code>.
	 */
	public final TableField<BookAuthorRecord, Long> AUTHOR_ID = createField("author_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * Create a <code>jooq_demo.book_author</code> table reference
	 */
	public BookAuthor() {
		this("book_author", null);
	}

	/**
	 * Create an aliased <code>jooq_demo.book_author</code> table reference
	 */
	public BookAuthor(String alias) {
		this(alias, BOOK_AUTHOR);
	}

	private BookAuthor(String alias, Table<BookAuthorRecord> aliased) {
		this(alias, aliased, null);
	}

	private BookAuthor(String alias, Table<BookAuthorRecord> aliased, Field<?>[] parameters) {
		super(alias, JooqDemo.JOOQ_DEMO, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<BookAuthorRecord> getPrimaryKey() {
		return Keys.KEY_BOOK_AUTHOR_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<BookAuthorRecord>> getKeys() {
		return Arrays.<UniqueKey<BookAuthorRecord>>asList(Keys.KEY_BOOK_AUTHOR_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<BookAuthorRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<BookAuthorRecord, ?>>asList(Keys.CONSTR_BOOKAUTHOR_BOOK_FK, Keys.CONSTR_BOOKAUTHOR_AUTHOR_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BookAuthor as(String alias) {
		return new BookAuthor(alias, this);
	}

	/**
	 * Rename this table
	 */
	public BookAuthor rename(String name) {
		return new BookAuthor(name, null);
	}
}
