/**
 * This class is generated by jOOQ
 */
package com.home.generated.tables;


import com.home.generated.JooqDemo;
import com.home.generated.Keys;
import com.home.generated.tables.records.AuthorsRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.1"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Authors extends TableImpl<AuthorsRecord> {

	private static final long serialVersionUID = 799261305;

	/**
	 * The reference instance of <code>jooq_demo.authors</code>
	 */
	public static final Authors AUTHORS = new Authors();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AuthorsRecord> getRecordType() {
		return AuthorsRecord.class;
	}

	/**
	 * The column <code>jooq_demo.authors.id</code>.
	 */
	public final TableField<AuthorsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>jooq_demo.authors.full_name</code>.
	 */
	public final TableField<AuthorsRecord, String> FULL_NAME = createField("full_name", org.jooq.impl.SQLDataType.VARCHAR.length(50), this, "");

	/**
	 * The column <code>jooq_demo.authors.birthday</code>.
	 */
	public final TableField<AuthorsRecord, Timestamp> BIRTHDAY = createField("birthday", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * Create a <code>jooq_demo.authors</code> table reference
	 */
	public Authors() {
		this("authors", null);
	}

	/**
	 * Create an aliased <code>jooq_demo.authors</code> table reference
	 */
	public Authors(String alias) {
		this(alias, AUTHORS);
	}

	private Authors(String alias, Table<AuthorsRecord> aliased) {
		this(alias, aliased, null);
	}

	private Authors(String alias, Table<AuthorsRecord> aliased, Field<?>[] parameters) {
		super(alias, JooqDemo.JOOQ_DEMO, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AuthorsRecord, Long> getIdentity() {
		return Keys.IDENTITY_AUTHORS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AuthorsRecord> getPrimaryKey() {
		return Keys.KEY_AUTHORS_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AuthorsRecord>> getKeys() {
		return Arrays.<UniqueKey<AuthorsRecord>>asList(Keys.KEY_AUTHORS_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Authors as(String alias) {
		return new Authors(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Authors rename(String name) {
		return new Authors(name, null);
	}
}
